%%***************************************************************************************
%% file         sfcn_modbus_server_read_map.tlc
%% brief        Target Language Compiler file that contains the code generation specifics
%%              for an S-function with the same name.
%%
%%---------------------------------------------------------------------------------------
%%                          C O P Y R I G H T
%%---------------------------------------------------------------------------------------
%%  Copyright 2024 (c) by GOcontroll      http://www.gocontroll.com     All rights reserved
%%
%%---------------------------------------------------------------------------------------
%%                            L I C E N S E
%%---------------------------------------------------------------------------------------
%% Permission is hereby granted, free of charge, to any person obtaining a copy of this
%% software and associated documentation files (the "Software"), to deal in the Software
%% without restriction, including without limitation the rights to use, copy, modify, merge,
%% publish, distribute, sublicense, and/or sell copies of the Software, and to permit
%% persons to whom the Software is furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in all copies or
%% substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
%% INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
%% PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
%% FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
%% OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
%% DEALINGS IN THE SOFTWARE.
%% endinternal
%%
%%***************************************************************************************

%implements sfcn_modbus_server_read_map "C"
%include "modbus_common.tlc"

%function CheckTabSize(block, tab_num, bytes, offset) void
	%switch (%<tab_num>)
		%case 1
			%if ::go_modbus_coils_num < %<bytes> + %<offset>
				%<LibBlockReportError(block, "This block is trying to read data from beyond the available range of coils, check your modbus configuration.")>
			%endif
			%break
		%case 2
			%if ::go_modbus_discrete_in_num < %<bytes> + %<offset>
				%<LibBlockReportError(block, "This block is trying to read data from beyond the available range of discrete inputs, check your modbus configuration.")>
			%endif
			%break
		%case 3
			%if ::go_modbus_holding_num * 2 < %<bytes> + %<offset> * 2
				%<LibBlockReportError(block, "This block is trying to read data from beyond the available range of holding registers, check your modbus configuration.")>
			%endif
			%break
		%case 4
			%if ::go_modbus_input_num * 2 < %<bytes> + %<offset> * 2
				%<LibBlockReportError(block, "This block is trying to read data from beyond the available range of input registers, check your modbus configuration.")>
			%endif
			%break
		%default
			%<LibBlockReportError(block, "Something very wacky is going on here, you shouldn't be able to get this error.")>
	%endswitch
%endfunction

%function ReadMemoryBlock(block, tab, tab_num) Output
	%assign address = %<block.ParamSettings.address>
	%assign length = %<block.ParamSettings.length>
	%switch (%<block.ParamSettings.data_type>)
		%case 1 %%double
			%<CheckTabSize(block, tab_num, length*8, address)>
			memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>, map->%<tab> + %<address>, %<length>*sizeof(double));
			%break
		%case 2 %%single/float
			%<CheckTabSize(block, tab_num, length*4, address)>
			memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>, map->%<tab> + %<address>, %<length>*sizeof(float));
			%break
		%case 3 %%int8
		%case 4 %%uint8
			%<CheckTabSize(block, tab_num, length, address)>
			memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>, map->%<tab> + %<address>, %<length>*sizeof(char));
			%break
		%case 5 %%int16
		%case 6 %%uint16
			%<CheckTabSize(block, tab_num, length*2, address)>
			memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>, map->%<tab> + %<address>, %<length>*sizeof(short));
			%break
		%case 7 %%int32
		%case 8 %%uint32
			%<CheckTabSize(block, tab_num, length*4, address)>
			memcpy(%<LibBlockOutputSignalAddr(0, "", "", 0)>, map->%<tab> + %<address>, %<length>*sizeof(int));
			%break
		%case 9 %%boolean
			%<CheckTabSize(block, tab_num, 1, address)>
			%<LibBlockOutputSignal(0,"","",0)> = (map->%<tab>[%<address>] & (1 << %<block.ParamSettings.bit>)) > 0;
			%break
		%default
			%<LibBlockReportError(block, "Invalid data type!")>
	%endswitch
%endfunction

%% Function: BlockTypeSetup ==========================================================
%%
%% Purpose:
%%      Code generation for configuration
%%
%function BlockTypeSetup(block, system) void
	%<ModbusServerCommonBlockTypeSetup()>
%endfunction

%function BlockInstanceSetup(block, system) void
%endfunction

%% Function: Start ==========================================================
%%
%% Purpose:
%%      initialize the reconnect_state struct
%%
%function Start(block, system) Output
	%if EXISTS(::go_modbus_server_config_present) == 0
		%<LibBlockReportError(block, "Modbus server configuration block is missing!")>
	%endif
%endfunction

%% Function: Output ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Outputs(block, system) Output
	pthread_mutex_lock(&map_lock);
	%switch (%<block.ParamSettings.block_type>)
		%case 1 %%coil
			%<ReadMemoryBlock(block, "tab_bits", 1)>
			%break
		%case 2 %%discrete
			%<ReadMemoryBlock(block, "tab_input_bits", 2)>
			%break
		%case 3 %%holding
			%<ReadMemoryBlock(block, "tab_registers", 3)>
			%break
		%case 4 %%input
			%<ReadMemoryBlock(block, "tab_input_registers", 4)>
			%break
		%default
			%<LibBlockReportError(block, "Invalid memory block type!")>
	%endswitch
	pthread_mutex_unlock(&map_lock);
%endfunction

%% Function: Terminate ==========================================================
%%
%% Purpose:
%%      Code generation for signal output
%%
%function Terminate (block, system) Output
%endfunction